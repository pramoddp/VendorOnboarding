// <auto-generated />
using System;
using AuthenticationService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthenticationService.Migrations
{
    [DbContext(typeof(AuthContext))]
    [Migration("20210121054626_UserPlantMapAdded")]
    partial class UserPlantMapAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthenticationService.Models.App", b =>
                {
                    b.Property<int>("AppID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("AppID");

                    b.ToTable("Apps");
                });

            modelBuilder.Entity("AuthenticationService.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AllowedOrigin")
                        .HasMaxLength(100);

                    b.Property<int>("ApplicationType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("RefreshTokenLifeTime");

                    b.Property<string>("Secret")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AuthenticationService.Models.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("RoleName");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AuthenticationService.Models.RoleAppMap", b =>
                {
                    b.Property<Guid>("RoleID");

                    b.Property<int>("AppID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("RoleID", "AppID");

                    b.HasAlternateKey("AppID", "RoleID");

                    b.ToTable("RoleAppMaps");
                });

            modelBuilder.Entity("AuthenticationService.Models.SessionMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("ProjectName");

                    b.Property<int>("SessionTimeOut");

                    b.HasKey("ID");

                    b.ToTable("SessionMasters");
                });

            modelBuilder.Entity("AuthenticationService.Models.TokenHistory", b =>
                {
                    b.Property<int>("TokenHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EmailAddress");

                    b.Property<DateTime>("ExpireOn");

                    b.Property<bool>("IsUsed");

                    b.Property<string>("Token");

                    b.Property<DateTime?>("UsedOn");

                    b.Property<Guid>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("TokenHistoryID");

                    b.ToTable("TokenHistories");
                });

            modelBuilder.Entity("AuthenticationService.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthenticationService.Models.UserLoginHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LoginTime");

                    b.Property<DateTime?>("LogoutTime");

                    b.Property<Guid>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.ToTable("UserLoginHistory");
                });

            modelBuilder.Entity("AuthenticationService.Models.UserPlantMap", b =>
                {
                    b.Property<Guid>("UserID");

                    b.Property<string>("Plant");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("UserID", "Plant");

                    b.HasAlternateKey("Plant", "UserID");

                    b.ToTable("UserPlantMaps");
                });

            modelBuilder.Entity("AuthenticationService.Models.UserRoleMap", b =>
                {
                    b.Property<Guid>("UserID");

                    b.Property<Guid>("RoleID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("UserID", "RoleID");

                    b.HasAlternateKey("RoleID", "UserID");

                    b.ToTable("UserRoleMaps");
                });

            modelBuilder.Entity("AuthenticationService.Models.UserPlantMap", b =>
                {
                    b.HasOne("AuthenticationService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
